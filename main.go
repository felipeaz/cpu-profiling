package main

import (
	"fmt"
	"sync"
	"time"
)

var (
	wg    sync.WaitGroup
	input = []int32{333, 662264213, 266868684, 316100246, 615253616, 433747001, 426331083, 134027361, 473450974, 656569655, 988175071, 412854171, 320371734, 746213503, 305829635, 150291368, 299214876, 290681430, 104963926, 483086798, 751611520, 628966758, 922752944, 374792946, 575489965, 140962508, 68349665, 435008860, 952537404, 598522415, 552809551, 55849929, 12364736, 301165965, 77400970, 650479549, 563494938, 256522890, 380515895, 917308271, 414992078, 892436331, 944586241, 107311988, 853785677, 883105857, 100637376, 135710015, 836529341, 766159050, 523189132, 441673900, 155231393, 928857887, 48838538, 76495362, 900784931, 880090808, 611811292, 560666002, 102719419, 414363295, 707393616, 695017514, 995784959, 817728036, 807227093, 57032077, 760394771, 279716094, 346671769, 389270466, 233516494, 52053361, 273450701, 270910321, 524416601, 596908913, 351968848, 15942623, 659675727, 504836000, 70745897, 467817282, 460388679, 161909584, 145559311, 224427816, 769981152, 129726614, 412261565, 890839505, 876535423, 193019135, 372278169, 52284444, 9779035, 585940776, 694083931, 130419585, 174123280, 617222940, 112899342, 709637396, 899005975, 691443305, 53596412, 792210163, 70559913, 282446419, 931066035, 506476328, 869934829, 718963999, 530411296, 418016369, 182087640, 975730277, 913620241, 707297631, 229281266, 737536716, 296937100, 662805844, 780126313, 195260850, 187055106, 712069106, 966566652, 164892381, 92326031, 33371655, 970114068, 804254624, 638353122, 765582814, 575808915, 852082795, 180055494, 388212229, 627596411, 720672454, 327127070, 259490942, 517936909, 214391466, 592771168, 528365337, 391321808, 350683136, 29301156, 129230432, 869886701, 117098125, 973149417, 486779161, 532130698, 44213303, 63624853, 43515006, 650722565, 707402625, 639410355, 354628669, 769881230, 597821207, 298003508, 613077346, 364399110, 979947367, 716270098, 351173776, 892574470, 325826189, 870420445, 497798945, 58046744, 72507373, 8173356, 723602656, 389929625, 574583572, 585095817, 377759900, 48961962, 210420305, 421461298, 98950874, 707958312, 241423529, 8625914, 887294021, 417127951, 75810421, 126399779, 539741964, 472247214, 106833227, 835657647, 147983521, 165935993, 97938670, 82736282, 919733737, 170588425, 981952002, 255453613, 589046532, 205433848, 720445801, 812737393, 326847356, 60326460, 294515030, 111769716, 51366037, 813519537, 941944751, 808946145, 238873052, 92431915, 665480396, 427143768, 760438627, 16803886, 895516017, 17777668, 289022337, 137875286, 721017039, 676116224, 149383685, 76172224, 119276928, 878048017, 638361307, 110169531, 488386997, 637742939, 454676790, 5976698, 311593649, 389310551, 552720020, 698586059, 635757236, 86199752, 355236980, 256345972, 347517294, 360602190, 442138690, 731527404, 437183147, 195578436, 82272067, 914628242, 261879840, 13439949, 985380258, 685072314, 350533025, 653869226, 699221455, 577439573, 341264390, 494743365, 95037565, 715988428, 59597027, 358309990, 571838936, 907660221, 468972900, 555507582, 97478937, 384411848, 972080932, 501599520, 509801359, 564650955, 358347786, 207076308, 53478541, 165657335, 856984605, 960397578, 914985788, 35725943, 297969682, 837542342, 966302750, 24458761, 909002744, 410436844, 494546138, 75210670, 138308026, 404143631, 98697597, 391593998, 630413172, 462829278, 585889106, 825666241, 80652414, 48881191, 645880686, 934320858, 523195314, 191069705, 820462864, 526841055, 542517998, 31894065, 758579055, 975231987, 921773377, 91079553, 411168732, 57969519, 922070445, 995955557, 537484975, 986717315, 682152843, 320602740, 333764051, 345102387, 929954603, 153991527, 210761426, 859714651, 747124113, 371044954, 652992762, 207897958, 978048209, 216397719, 99610634, 704621328, 345813332, 786883914, 746606144, 255474559, 734064532, 921999081, 944024456, 402809728, 947604924, 450193288, 606664807, 756017065, 865538997, 852659573, 491050174, 300602191, 339469587, 394260402, 347508613, 214700623, 700826995, 998968011, 421170403, 297824481, 544632782, 67846754, 779539693, 73356745, 837140187, 295229537, 235586983, 343539985, 440467953, 361716634, 638224753, 110073747, 464502465, 789855604, 506697515, 85436022, 842602261, 109015503, 212969802, 321184437, 520410942, 638769735, 532167986, 25417788, 433457513, 648852139, 128902479, 445926502, 116257925, 322767055, 995162835, 99108203, 57219521, 763282432, 213489218, 815579630, 851684381, 280867406, 162398308, 769608991, 524289050, 600642903, 832113015, 702895613, 51987316, 517937455, 223568088, 205434538, 732042631, 299647326, 116417639, 66618028, 603178281, 140033052, 40894693, 708278561, 328881178, 676013040, 562653844, 945620139, 304166498, 115235220, 521054718, 75799801, 95393086, 687252443, 484739129, 250546157, 861295773, 403754156, 995242213, 78709180, 808223480, 977944279, 617129856, 548436554, 573333348, 254438941, 715323404, 826978316, 510376822, 853544430, 330456244, 585364960, 606279007, 68832475, 959661942, 436053418, 181070887, 274053204, 807243654, 335372804, 613610294, 524700136, 860292942, 729042715, 626688064, 131964885, 730681685, 48548021, 488743437, 978957656, 469087919, 341148268, 690564558, 316881112, 854366596, 263698324, 364445832, 617720374, 90359414, 192694441, 3091983, 220312525, 323762019, 537653607, 880453114, 258637293, 410065117, 689381390, 758729359, 206424021, 182414236, 22378308, 302567525, 11099773, 870274363, 983060996, 714446595, 915813560, 856166643, 97812126, 103394921, 237128596, 483625912, 75082283, 335012786, 650733640, 893540150, 169119351, 61029048, 803966820, 303220010, 239996933, 654147059, 280814814, 278484564, 123183529, 964297967, 44314301, 199571748, 625873794, 685935946, 833210520, 28330747, 560962036, 428690494, 986458745, 838355569, 601823410, 198057694, 155993402, 851041268, 2464028, 49186006, 35465588, 655624000, 333958437, 464664242, 6852927, 360493992, 564117129, 769247370, 888975844, 973261123, 216738256, 587586474, 436042806, 2715003, 533882028, 768550624, 63667704, 54701625, 247193653, 350335867, 487718367, 137496764, 215691570, 175804048, 948603305, 50113579, 238294401, 749957724, 957926219, 181044368, 975832018, 269076159, 555405503, 736342253, 548950282, 617625256, 639194835, 27351323, 718125553, 471034903, 851853651, 623799580, 184359600, 860361420, 879952461, 434096910, 864800705, 536109233, 693963060, 246424335, 98288701, 109213514, 38951963, 476091578, 147065918, 130672970, 930776259, 285683459, 501422493, 681992217, 122950274, 338948476, 225882413, 802094236, 835934005, 497765133, 135263391, 334097205, 294949302, 820644632, 434332184, 317062107, 748865914, 580723303, 50844747, 435111673, 533031848, 157455824, 660164058, 476785598, 867020401, 128296484, 791365350, 904173351, 640185857, 503588901, 378568052, 392165675, 501170276}
)

func nonDivisibleSubset(k int32, s []int32) int32 {
	var maxLen int32
	begin := time.Now()

	for i := 0; i < len(s); i++ {
		var subset []int32
		var subsetLen int32
		subsetLen++
		for j := 0; j < len(s); j++ {
			// Skip current subset element defined by i
			// Or equal elements
			if i == j || s[i] == s[j] {
				continue
			}
			// If element + current subset elem is not divisible by k
			// Check if it happens with other subset elems subset array
			if (s[i]+s[j])%k != 0 {
				subset = updateSubset(subset, s[j], k, &subsetLen)
			}
		}
		// Added the current subset element to the slice
		subset = append(subset, s[i])
		if subsetLen > maxLen {
			maxLen = subsetLen
		}
	}

	fmt.Println("Process took", time.Since(begin))
	return maxLen
}

func goroutinesNonDivisibleSubset(k int32, s []int32) int32 {
	var maxLen int32
	begin := time.Now()

	// Channel Pool
	// The subset sum will be stored into the channel pool
	// during the execution
	size := len(s)
	ch := make(chan int32, size)

	go generateSubset(s, k, size, ch)

	for v := range ch {
		if v > maxLen {
			maxLen = v
		}
	}

	// Wait for all goroutines signal
	wg.Wait()

	fmt.Println("Process took", time.Since(begin))
	return maxLen
}

func generateSubset(s []int32, k int32, size int, ch chan<- int32) {
	for i := 0; i < size; i++ {
		var subset []int32
		var subsetLen int32
		subsetLen++
		for j := 0; j < len(s); j++ {
			// Skip current subset element defined by i
			// Or equal elements
			if i == j || s[i] == s[j] {
				continue
			}
			// If element + current subset elem is not divisible by k
			// Check if it happens with other subset elems subset array
			if (s[i]+s[j])%k != 0 {
				subset = updateSubset(subset, s[j], k, &subsetLen)
			}
		}
		// Added the current subset element to the slice
		subset = append(subset, s[i])
		ch <- subsetLen
	}
	close(ch)
}

func updateSubset(subset []int32, elem int32, k int32, subsetLen *int32) []int32 {
	for i := 0; i < len(subset); i++ {
		if subset[i] == elem || !respectSubsetRule(subset[i], elem, k) {
			return subset
		}
	}
	*subsetLen++
	return append(subset, elem)
}

func respectSubsetRule(subsetElem int32, elem int32, num int32) bool {
	return (subsetElem+elem)%num != 0
}

func main() {
	nonDivisibleSubset(3, input)
	//goroutinesNonDivisibleSubset(3, input)
}
